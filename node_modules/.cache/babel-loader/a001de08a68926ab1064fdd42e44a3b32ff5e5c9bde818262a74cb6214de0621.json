{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jean-Luc\\\\Desktop\\\\pulsechain-flop-auctions\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// App.js - Main component for the PulseChain Flop Auctions UI\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport './App.css';\nimport FlopAuctionList from './components/FlopAuctionList';\nimport AuctionDetail from './components/AuctionDetail';\nimport WalletConnect from './components/WalletConnect';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport LoadingSpinner from './components/LoadingSpinner';\nimport { flopperABI } from './abis/flopperABI';\nimport { vatABI } from './abis/vatABI';\n\n// PulseChain contract addresses - replace these with actual PulseMaker addresses\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FLOPPER_ADDRESS = \"0xA41B6EF151E06da0e34B009B86E828308986736D\";\nconst VAT_ADDRESS = \"0x35d1b3f3d7966a1dfe207aa4514c12a259a0492b\";\nconst MKR_ADDRESS = \"0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2\";\nconst DAI_JOIN_ADDRESS = \"0x9759a6ac90977b93b58547b4a71c78317f391a28\";\nfunction App() {\n  _s();\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [account, setAccount] = useState('');\n  const [chainId, setChainId] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  // Contract instances\n  const [flopperContract, setFlopperContract] = useState(null);\n  const [vatContract, setVatContract] = useState(null);\n\n  // Auction data\n  const [auctions, setAuctions] = useState([]);\n  const [selectedAuction, setSelectedAuction] = useState(null);\n  const [userDaiBalance, setUserDaiBalance] = useState('0');\n  const [userMkrBalance, setUserMkrBalance] = useState('0');\n  const [userDaiInVat, setUserDaiInVat] = useState('0');\n\n  // PulseChain network ID - replace with actual PulseChain mainnet ID\n  const PULSECHAIN_NETWORK_ID = 369; // Example, use actual PulseChain network ID\n\n  // Connect wallet\n  const connectWallet = async () => {\n    try {\n      setLoading(true);\n      setError('');\n      if (window.ethereum) {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        const signer = provider.getSigner();\n        const account = await signer.getAddress();\n        const {\n          chainId\n        } = await provider.getNetwork();\n\n        // Check if connected to PulseChain\n        if (chainId !== PULSECHAIN_NETWORK_ID) {\n          try {\n            // Try to switch to PulseChain network\n            await window.ethereum.request({\n              method: 'wallet_switchEthereumChain',\n              params: [{\n                chainId: ethers.utils.hexValue(PULSECHAIN_NETWORK_ID)\n              }]\n            });\n          } catch (switchError) {\n            // If network doesn't exist in user's wallet, we need to add it\n            if (switchError.code === 4902) {\n              await window.ethereum.request({\n                method: 'wallet_addEthereumChain',\n                params: [{\n                  chainId: ethers.utils.hexValue(PULSECHAIN_NETWORK_ID),\n                  chainName: 'PulseChain',\n                  nativeCurrency: {\n                    name: 'PLS',\n                    symbol: 'PLS',\n                    decimals: 18\n                  },\n                  rpcUrls: ['https://rpc.pulsechain.com'],\n                  blockExplorerUrls: ['https://scan.pulsechain.com']\n                }]\n              });\n            } else {\n              throw switchError;\n            }\n          }\n        }\n\n        // Initialize contracts\n        const flopperContract = new ethers.Contract(FLOPPER_ADDRESS, flopperABI, signer);\n        const vatContract = new ethers.Contract(VAT_ADDRESS, vatABI, signer);\n        setProvider(provider);\n        setSigner(signer);\n        setAccount(account);\n        setChainId(chainId);\n        setIsConnected(true);\n        setFlopperContract(flopperContract);\n        setVatContract(vatContract);\n\n        // Set up event listeners for wallet changes\n        window.ethereum.on('accountsChanged', handleAccountsChanged);\n        window.ethereum.on('chainChanged', handleChainChanged);\n\n        // Fetch initial data\n        await fetchUserBalances(account, vatContract);\n        await fetchAuctions(flopperContract);\n      } else {\n        setError('MetaMask or compatible wallet not found. Please install MetaMask.');\n      }\n    } catch (err) {\n      console.error('Connection error:', err);\n      setError(`Failed to connect wallet: ${err.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle account changes\n  const handleAccountsChanged = async accounts => {\n    if (accounts.length === 0) {\n      // User disconnected their wallet\n      resetConnection();\n    } else {\n      // User switched accounts\n      setAccount(accounts[0]);\n      await fetchUserBalances(accounts[0], vatContract);\n    }\n  };\n\n  // Handle chain changes\n  const handleChainChanged = () => {\n    // Reload the page when the chain changes\n    window.location.reload();\n  };\n\n  // Reset connection state\n  const resetConnection = () => {\n    setProvider(null);\n    setSigner(null);\n    setAccount('');\n    setChainId(null);\n    setIsConnected(false);\n    setFlopperContract(null);\n    setVatContract(null);\n    setAuctions([]);\n    setSelectedAuction(null);\n    setUserDaiBalance('0');\n    setUserMkrBalance('0');\n    setUserDaiInVat('0');\n  };\n\n  // Disconnect wallet\n  const disconnectWallet = () => {\n    if (window.ethereum) {\n      window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n      window.ethereum.removeListener('chainChanged', handleChainChanged);\n    }\n    resetConnection();\n  };\n\n  // Fetch user balances\n  const fetchUserBalances = async (account, vatContract) => {\n    try {\n      if (!account || !vatContract) return;\n\n      // Get DAI balance in VAT\n      const daiInVat = await vatContract.dai(account);\n      setUserDaiInVat(ethers.utils.formatUnits(daiInVat, 45)); // RAD precision (10^45)\n\n      // We would also fetch token balances here, but this is simplified\n      // In a real implementation, you would need ERC20 contract instances for DAI and MKR\n    } catch (err) {\n      console.error('Error fetching balances:', err);\n    }\n  };\n\n  // Fetch active auctions\n  const fetchAuctions = async flopperContract => {\n    try {\n      if (!flopperContract) return;\n      setLoading(true);\n      console.log(\"Starting to fetch auctions...\");\n\n      // Get total number of auctions kicked\n      const kicks = await flopperContract.kicks();\n      const totalAuctions = kicks.toNumber();\n      console.log(`Total auctions kicked: ${totalAuctions}`);\n      const activeAuctions = [];\n\n      // Loop through auction IDs to find active ones\n      for (let i = 1; i <= totalAuctions; i++) {\n        console.log(`Checking auction ID ${i}...`);\n        try {\n          const auctionData = await flopperContract.bids(i);\n          console.log(`Auction ID ${i} data:`, auctionData);\n\n          // Check if auction is still active\n          if (auctionData.bid.gt(0) && auctionData.guy !== ethers.constants.AddressZero) {\n            // Handle tic as either BigNumber or uint48\n            let tic;\n            if (typeof auctionData.tic.toNumber === 'function') {\n              tic = auctionData.tic.toNumber();\n            } else if (typeof auctionData.tic === 'number') {\n              tic = auctionData.tic;\n            } else {\n              // If it's a string or other format, convert it\n              tic = Number(auctionData.tic.toString());\n            }\n            const now = Math.floor(Date.now() / 1000);\n\n            // Get end timestamp with similar type checking\n            let end;\n            if (typeof auctionData.end.toNumber === 'function') {\n              end = auctionData.end.toNumber();\n            } else if (typeof auctionData.end === 'number') {\n              end = auctionData.end;\n            } else {\n              end = Number(auctionData.end.toString());\n            }\n\n            // Only include active auctions\n            if (tic === 0 || tic > now || end > now) {\n              const auctionInfo = {\n                id: i,\n                bid: ethers.utils.formatUnits(auctionData.bid, 18),\n                // RAD precision converted to readable format\n                lot: ethers.utils.formatUnits(auctionData.lot, 18),\n                // WAD precision\n                guy: auctionData.guy,\n                tic: tic,\n                end: end,\n                endFormatted: end > 0 ? new Date(end * 1000).toLocaleString() : 'Unknown',\n                status: tic === 0 ? 'Not started' : tic > now ? 'Active' : end > now ? 'Bidding ended, auction active' : 'Ended'\n              };\n              console.log(`ACTIVE DEBT AUCTION FOUND: Auction #${i}`, auctionInfo);\n              activeAuctions.push(auctionInfo);\n            } else {\n              console.log(`Auction #${i} is inactive: tic=${tic}, now=${now}, end=${end}`);\n            }\n          } else {\n            console.log(`Auction #${i} is inactive: No bid or no bidder`);\n          }\n        } catch (auctionError) {\n          console.error(`Error fetching auction #${i}:`, auctionError);\n        }\n      }\n      console.log(`Total active auctions found: ${activeAuctions.length}`);\n      console.log(\"Active auctions:\", activeAuctions);\n      setAuctions(activeAuctions);\n    } catch (err) {\n      console.error('Error fetching auctions:', err);\n      setError(`Failed to fetch auctions: ${err.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Select an auction to view details\n  const selectAuction = auction => {\n    setSelectedAuction(auction);\n  };\n\n  // Place a bid in the auction\n  const placeBid = async (auctionId, lotAmount) => {\n    try {\n      if (!flopperContract || !signer) {\n        setError('Wallet not connected or contracts not initialized');\n        return;\n      }\n      setLoading(true);\n\n      // Get current auction state\n      const auctionData = await flopperContract.bids(auctionId);\n\n      // Ensure we have enough DAI in VAT to place bid\n      const bidAmount = auctionData.bid;\n      const daiInVat = await vatContract.dai(account);\n      if (daiInVat.lt(bidAmount)) {\n        setError(`Not enough DAI in VAT. Need ${ethers.utils.formatUnits(bidAmount, 45)} DAI, have ${ethers.utils.formatUnits(daiInVat, 45)} DAI.`);\n        return;\n      }\n\n      // Convert lot amount to proper format (WAD precision)\n      const lotAmountWad = ethers.utils.parseUnits(lotAmount.toString(), 18);\n\n      // Call dent function to place bid with fixed DAI amount and reduced lot size\n      // dent(uint id, uint lot, uint bid)\n      const tx = await flopperContract.dent(auctionId, lotAmountWad, bidAmount);\n\n      // Wait for transaction to be mined\n      const receipt = await tx.wait();\n      if (receipt.status === 1) {\n        // Transaction successful\n        // Refresh auction data\n        await fetchAuctions(flopperContract);\n        await fetchUserBalances(account, vatContract);\n\n        // Update selected auction\n        const updatedAuction = auctions.find(a => a.id === auctionId);\n        setSelectedAuction(updatedAuction);\n      } else {\n        setError('Transaction failed. Please try again.');\n      }\n    } catch (err) {\n      console.error('Error placing bid:', err);\n      setError(`Failed to place bid: ${err.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Deal (settle) an auction\n  const dealAuction = async auctionId => {\n    try {\n      if (!flopperContract || !signer) {\n        setError('Wallet not connected or contracts not initialized');\n        return;\n      }\n      setLoading(true);\n\n      // Call deal function to settle auction\n      const tx = await flopperContract.deal(auctionId);\n\n      // Wait for transaction to be mined\n      const receipt = await tx.wait();\n      if (receipt.status === 1) {\n        // Transaction successful\n        // Refresh auction data\n        await fetchAuctions(flopperContract);\n        await fetchUserBalances(account, vatContract);\n\n        // Clear selected auction if it was the one dealt\n        if (selectedAuction && selectedAuction.id === auctionId) {\n          setSelectedAuction(null);\n        }\n      } else {\n        setError('Transaction failed. Please try again.');\n      }\n    } catch (err) {\n      console.error('Error dealing auction:', err);\n      setError(`Failed to deal auction: ${err.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Restart an auction that received no bids\n  const restartAuction = async auctionId => {\n    try {\n      if (!flopperContract || !signer) {\n        setError('Wallet not connected or contracts not initialized');\n        return;\n      }\n      setLoading(true);\n\n      // Call tick function to restart auction\n      const tx = await flopperContract.tick(auctionId);\n\n      // Wait for transaction to be mined\n      const receipt = await tx.wait();\n      if (receipt.status === 1) {\n        // Transaction successful\n        // Refresh auction data\n        await fetchAuctions(flopperContract);\n\n        // Update selected auction\n        const updatedAuction = auctions.find(a => a.id === auctionId);\n        setSelectedAuction(updatedAuction);\n      } else {\n        setError('Transaction failed. Please try again.');\n      }\n    } catch (err) {\n      console.error('Error restarting auction:', err);\n      setError(`Failed to restart auction: ${err.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Refresh data periodically\n  useEffect(() => {\n    if (isConnected && flopperContract && vatContract) {\n      // Initial fetch\n      fetchAuctions(flopperContract);\n      fetchUserBalances(account, vatContract);\n\n      // Set up interval for periodic updates\n      const interval = setInterval(() => {\n        fetchAuctions(flopperContract);\n        fetchUserBalances(account, vatContract);\n      }, 30000); // Update every 30 seconds\n\n      return () => clearInterval(interval);\n    }\n  }, [isConnected, flopperContract, vatContract, account]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      isConnected: isConnected,\n      account: account,\n      daiBalance: userDaiBalance,\n      mkrBalance: userMkrBalance,\n      daiInVat: userDaiInVat\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 7\n    }, this), !isConnected ? /*#__PURE__*/_jsxDEV(WalletConnect, {\n      connectWallet: connectWallet,\n      loading: loading,\n      error: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [loading && /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 23\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"auction-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"auction-list-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Active Flop Auctions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 433,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(FlopAuctionList, {\n            auctions: auctions,\n            selectAuction: selectAuction,\n            selectedAuctionId: selectedAuction ? selectedAuction.id : null\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 434,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"auction-detail-container\",\n          children: selectedAuction ? /*#__PURE__*/_jsxDEV(AuctionDetail, {\n            auction: selectedAuction,\n            placeBid: placeBid,\n            dealAuction: dealAuction,\n            restartAuction: restartAuction,\n            userDaiInVat: userDaiInVat\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"no-auction-selected\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Select an auction to view details\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 452,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {\n      disconnectWallet: disconnectWallet,\n      isConnected: isConnected\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 410,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"14xYg9oPdiYx4fQPhcqptCsl7vU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ethers","FlopAuctionList","AuctionDetail","WalletConnect","Header","Footer","LoadingSpinner","flopperABI","vatABI","jsxDEV","_jsxDEV","FLOPPER_ADDRESS","VAT_ADDRESS","MKR_ADDRESS","DAI_JOIN_ADDRESS","App","_s","provider","setProvider","signer","setSigner","account","setAccount","chainId","setChainId","isConnected","setIsConnected","loading","setLoading","error","setError","flopperContract","setFlopperContract","vatContract","setVatContract","auctions","setAuctions","selectedAuction","setSelectedAuction","userDaiBalance","setUserDaiBalance","userMkrBalance","setUserMkrBalance","userDaiInVat","setUserDaiInVat","PULSECHAIN_NETWORK_ID","connectWallet","window","ethereum","providers","Web3Provider","request","method","getSigner","getAddress","getNetwork","params","utils","hexValue","switchError","code","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","Contract","on","handleAccountsChanged","handleChainChanged","fetchUserBalances","fetchAuctions","err","console","message","accounts","length","resetConnection","location","reload","disconnectWallet","removeListener","daiInVat","dai","formatUnits","log","kicks","totalAuctions","toNumber","activeAuctions","i","auctionData","bids","bid","gt","guy","constants","AddressZero","tic","Number","toString","now","Math","floor","Date","end","auctionInfo","id","lot","endFormatted","toLocaleString","status","push","auctionError","selectAuction","auction","placeBid","auctionId","lotAmount","bidAmount","lt","lotAmountWad","parseUnits","tx","dent","receipt","wait","updatedAuction","find","a","dealAuction","deal","restartAuction","tick","interval","setInterval","clearInterval","className","children","daiBalance","mkrBalance","fileName","_jsxFileName","lineNumber","columnNumber","selectedAuctionId","_c","$RefreshReg$"],"sources":["C:/Users/Jean-Luc/Desktop/pulsechain-flop-auctions/src/App.js"],"sourcesContent":["// App.js - Main component for the PulseChain Flop Auctions UI\r\nimport React, { useState, useEffect } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport './App.css';\r\nimport FlopAuctionList from './components/FlopAuctionList';\r\nimport AuctionDetail from './components/AuctionDetail';\r\nimport WalletConnect from './components/WalletConnect';\r\nimport Header from './components/Header';\r\nimport Footer from './components/Footer';\r\nimport LoadingSpinner from './components/LoadingSpinner';\r\nimport { flopperABI } from './abis/flopperABI';\r\nimport { vatABI } from './abis/vatABI';\r\n\r\n// PulseChain contract addresses - replace these with actual PulseMaker addresses\r\nconst FLOPPER_ADDRESS = \"0xA41B6EF151E06da0e34B009B86E828308986736D\";\r\nconst VAT_ADDRESS = \"0x35d1b3f3d7966a1dfe207aa4514c12a259a0492b\";\r\nconst MKR_ADDRESS = \"0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2\";\r\nconst DAI_JOIN_ADDRESS = \"0x9759a6ac90977b93b58547b4a71c78317f391a28\";\r\n\r\nfunction App() {\r\n  const [provider, setProvider] = useState(null);\r\n  const [signer, setSigner] = useState(null);\r\n  const [account, setAccount] = useState('');\r\n  const [chainId, setChainId] = useState(null);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  \r\n  // Contract instances\r\n  const [flopperContract, setFlopperContract] = useState(null);\r\n  const [vatContract, setVatContract] = useState(null);\r\n  \r\n  // Auction data\r\n  const [auctions, setAuctions] = useState([]);\r\n  const [selectedAuction, setSelectedAuction] = useState(null);\r\n  const [userDaiBalance, setUserDaiBalance] = useState('0');\r\n  const [userMkrBalance, setUserMkrBalance] = useState('0');\r\n  const [userDaiInVat, setUserDaiInVat] = useState('0');\r\n  \r\n  // PulseChain network ID - replace with actual PulseChain mainnet ID\r\n  const PULSECHAIN_NETWORK_ID = 369; // Example, use actual PulseChain network ID\r\n\r\n  // Connect wallet\r\n  const connectWallet = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError('');\r\n      \r\n      if (window.ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n        \r\n        const signer = provider.getSigner();\r\n        const account = await signer.getAddress();\r\n        const { chainId } = await provider.getNetwork();\r\n        \r\n        // Check if connected to PulseChain\r\n        if (chainId !== PULSECHAIN_NETWORK_ID) {\r\n          try {\r\n            // Try to switch to PulseChain network\r\n            await window.ethereum.request({\r\n              method: 'wallet_switchEthereumChain',\r\n              params: [{ chainId: ethers.utils.hexValue(PULSECHAIN_NETWORK_ID) }],\r\n            });\r\n          } catch (switchError) {\r\n            // If network doesn't exist in user's wallet, we need to add it\r\n            if (switchError.code === 4902) {\r\n              await window.ethereum.request({\r\n                method: 'wallet_addEthereumChain',\r\n                params: [{\r\n                  chainId: ethers.utils.hexValue(PULSECHAIN_NETWORK_ID),\r\n                  chainName: 'PulseChain',\r\n                  nativeCurrency: {\r\n                    name: 'PLS',\r\n                    symbol: 'PLS',\r\n                    decimals: 18\r\n                  },\r\n                  rpcUrls: ['https://rpc.pulsechain.com'],\r\n                  blockExplorerUrls: ['https://scan.pulsechain.com']\r\n                }]\r\n              });\r\n            } else {\r\n              throw switchError;\r\n            }\r\n          }\r\n        }\r\n        \r\n        // Initialize contracts\r\n        const flopperContract = new ethers.Contract(FLOPPER_ADDRESS, flopperABI, signer);\r\n        const vatContract = new ethers.Contract(VAT_ADDRESS, vatABI, signer);\r\n        \r\n        setProvider(provider);\r\n        setSigner(signer);\r\n        setAccount(account);\r\n        setChainId(chainId);\r\n        setIsConnected(true);\r\n        setFlopperContract(flopperContract);\r\n        setVatContract(vatContract);\r\n        \r\n        // Set up event listeners for wallet changes\r\n        window.ethereum.on('accountsChanged', handleAccountsChanged);\r\n        window.ethereum.on('chainChanged', handleChainChanged);\r\n        \r\n        // Fetch initial data\r\n        await fetchUserBalances(account, vatContract);\r\n        await fetchAuctions(flopperContract);\r\n      } else {\r\n        setError('MetaMask or compatible wallet not found. Please install MetaMask.');\r\n      }\r\n    } catch (err) {\r\n      console.error('Connection error:', err);\r\n      setError(`Failed to connect wallet: ${err.message}`);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Handle account changes\r\n  const handleAccountsChanged = async (accounts) => {\r\n    if (accounts.length === 0) {\r\n      // User disconnected their wallet\r\n      resetConnection();\r\n    } else {\r\n      // User switched accounts\r\n      setAccount(accounts[0]);\r\n      await fetchUserBalances(accounts[0], vatContract);\r\n    }\r\n  };\r\n  \r\n  // Handle chain changes\r\n  const handleChainChanged = () => {\r\n    // Reload the page when the chain changes\r\n    window.location.reload();\r\n  };\r\n  \r\n  // Reset connection state\r\n  const resetConnection = () => {\r\n    setProvider(null);\r\n    setSigner(null);\r\n    setAccount('');\r\n    setChainId(null);\r\n    setIsConnected(false);\r\n    setFlopperContract(null);\r\n    setVatContract(null);\r\n    setAuctions([]);\r\n    setSelectedAuction(null);\r\n    setUserDaiBalance('0');\r\n    setUserMkrBalance('0');\r\n    setUserDaiInVat('0');\r\n  };\r\n  \r\n  // Disconnect wallet\r\n  const disconnectWallet = () => {\r\n    if (window.ethereum) {\r\n      window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\r\n      window.ethereum.removeListener('chainChanged', handleChainChanged);\r\n    }\r\n    resetConnection();\r\n  };\r\n  \r\n  // Fetch user balances\r\n  const fetchUserBalances = async (account, vatContract) => {\r\n    try {\r\n      if (!account || !vatContract) return;\r\n      \r\n      // Get DAI balance in VAT\r\n      const daiInVat = await vatContract.dai(account);\r\n      setUserDaiInVat(ethers.utils.formatUnits(daiInVat, 45)); // RAD precision (10^45)\r\n      \r\n      // We would also fetch token balances here, but this is simplified\r\n      // In a real implementation, you would need ERC20 contract instances for DAI and MKR\r\n    } catch (err) {\r\n      console.error('Error fetching balances:', err);\r\n    }\r\n  };\r\n  \r\n  // Fetch active auctions\r\n  const fetchAuctions = async (flopperContract) => {\r\n    try {\r\n      if (!flopperContract) return;\r\n\r\n      setLoading(true);\r\n      console.log(\"Starting to fetch auctions...\");\r\n\r\n      // Get total number of auctions kicked\r\n      const kicks = await flopperContract.kicks();\r\n      const totalAuctions = kicks.toNumber();\r\n      console.log(`Total auctions kicked: ${totalAuctions}`);\r\n\r\n      const activeAuctions = [];\r\n\r\n      // Loop through auction IDs to find active ones\r\n      for (let i = 1; i <= totalAuctions; i++) {\r\n        console.log(`Checking auction ID ${i}...`);\r\n\r\n        try {\r\n          const auctionData = await flopperContract.bids(i);\r\n          console.log(`Auction ID ${i} data:`, auctionData);\r\n\r\n          // Check if auction is still active\r\n          if (auctionData.bid.gt(0) && auctionData.guy !== ethers.constants.AddressZero) {\r\n            // Handle tic as either BigNumber or uint48\r\n            let tic;\r\n            if (typeof auctionData.tic.toNumber === 'function') {\r\n              tic = auctionData.tic.toNumber();\r\n            } else if (typeof auctionData.tic === 'number') {\r\n              tic = auctionData.tic;\r\n            } else {\r\n              // If it's a string or other format, convert it\r\n              tic = Number(auctionData.tic.toString());\r\n            }\r\n\r\n            const now = Math.floor(Date.now() / 1000);\r\n\r\n            // Get end timestamp with similar type checking\r\n            let end;\r\n            if (typeof auctionData.end.toNumber === 'function') {\r\n              end = auctionData.end.toNumber();\r\n            } else if (typeof auctionData.end === 'number') {\r\n              end = auctionData.end;\r\n            } else {\r\n              end = Number(auctionData.end.toString());\r\n            }\r\n\r\n            // Only include active auctions\r\n            if (tic === 0 || tic > now || end > now) {\r\n              const auctionInfo = {\r\n                id: i,\r\n                bid: ethers.utils.formatUnits(auctionData.bid, 18), // RAD precision converted to readable format\r\n                lot: ethers.utils.formatUnits(auctionData.lot, 18), // WAD precision\r\n                guy: auctionData.guy,\r\n                tic: tic,\r\n                end: end,\r\n                endFormatted: end > 0 ? new Date(end * 1000).toLocaleString() : 'Unknown',\r\n                status: tic === 0 ? 'Not started' : (tic > now ? 'Active' : (end > now ? 'Bidding ended, auction active' : 'Ended'))\r\n              };\r\n\r\n              console.log(`ACTIVE DEBT AUCTION FOUND: Auction #${i}`, auctionInfo);\r\n              activeAuctions.push(auctionInfo);\r\n            } else {\r\n              console.log(`Auction #${i} is inactive: tic=${tic}, now=${now}, end=${end}`);\r\n            }\r\n          } else {\r\n            console.log(`Auction #${i} is inactive: No bid or no bidder`);\r\n          }\r\n        } catch (auctionError) {\r\n          console.error(`Error fetching auction #${i}:`, auctionError);\r\n        }\r\n      }\r\n\r\n      console.log(`Total active auctions found: ${activeAuctions.length}`);\r\n      console.log(\"Active auctions:\", activeAuctions);\r\n\r\n      setAuctions(activeAuctions);\r\n    } catch (err) {\r\n      console.error('Error fetching auctions:', err);\r\n      setError(`Failed to fetch auctions: ${err.message}`);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Select an auction to view details\r\n  const selectAuction = (auction) => {\r\n    setSelectedAuction(auction);\r\n  };\r\n  \r\n  // Place a bid in the auction\r\n  const placeBid = async (auctionId, lotAmount) => {\r\n    try {\r\n      if (!flopperContract || !signer) {\r\n        setError('Wallet not connected or contracts not initialized');\r\n        return;\r\n      }\r\n      \r\n      setLoading(true);\r\n      \r\n      // Get current auction state\r\n      const auctionData = await flopperContract.bids(auctionId);\r\n      \r\n      // Ensure we have enough DAI in VAT to place bid\r\n      const bidAmount = auctionData.bid;\r\n      const daiInVat = await vatContract.dai(account);\r\n      \r\n      if (daiInVat.lt(bidAmount)) {\r\n        setError(`Not enough DAI in VAT. Need ${ethers.utils.formatUnits(bidAmount, 45)} DAI, have ${ethers.utils.formatUnits(daiInVat, 45)} DAI.`);\r\n        return;\r\n      }\r\n      \r\n      // Convert lot amount to proper format (WAD precision)\r\n      const lotAmountWad = ethers.utils.parseUnits(lotAmount.toString(), 18);\r\n      \r\n      // Call dent function to place bid with fixed DAI amount and reduced lot size\r\n      // dent(uint id, uint lot, uint bid)\r\n      const tx = await flopperContract.dent(auctionId, lotAmountWad, bidAmount);\r\n      \r\n      // Wait for transaction to be mined\r\n      const receipt = await tx.wait();\r\n      \r\n      if (receipt.status === 1) {\r\n        // Transaction successful\r\n        // Refresh auction data\r\n        await fetchAuctions(flopperContract);\r\n        await fetchUserBalances(account, vatContract);\r\n        \r\n        // Update selected auction\r\n        const updatedAuction = auctions.find(a => a.id === auctionId);\r\n        setSelectedAuction(updatedAuction);\r\n      } else {\r\n        setError('Transaction failed. Please try again.');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error placing bid:', err);\r\n      setError(`Failed to place bid: ${err.message}`);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Deal (settle) an auction\r\n  const dealAuction = async (auctionId) => {\r\n    try {\r\n      if (!flopperContract || !signer) {\r\n        setError('Wallet not connected or contracts not initialized');\r\n        return;\r\n      }\r\n      \r\n      setLoading(true);\r\n      \r\n      // Call deal function to settle auction\r\n      const tx = await flopperContract.deal(auctionId);\r\n      \r\n      // Wait for transaction to be mined\r\n      const receipt = await tx.wait();\r\n      \r\n      if (receipt.status === 1) {\r\n        // Transaction successful\r\n        // Refresh auction data\r\n        await fetchAuctions(flopperContract);\r\n        await fetchUserBalances(account, vatContract);\r\n        \r\n        // Clear selected auction if it was the one dealt\r\n        if (selectedAuction && selectedAuction.id === auctionId) {\r\n          setSelectedAuction(null);\r\n        }\r\n      } else {\r\n        setError('Transaction failed. Please try again.');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error dealing auction:', err);\r\n      setError(`Failed to deal auction: ${err.message}`);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Restart an auction that received no bids\r\n  const restartAuction = async (auctionId) => {\r\n    try {\r\n      if (!flopperContract || !signer) {\r\n        setError('Wallet not connected or contracts not initialized');\r\n        return;\r\n      }\r\n      \r\n      setLoading(true);\r\n      \r\n      // Call tick function to restart auction\r\n      const tx = await flopperContract.tick(auctionId);\r\n      \r\n      // Wait for transaction to be mined\r\n      const receipt = await tx.wait();\r\n      \r\n      if (receipt.status === 1) {\r\n        // Transaction successful\r\n        // Refresh auction data\r\n        await fetchAuctions(flopperContract);\r\n        \r\n        // Update selected auction\r\n        const updatedAuction = auctions.find(a => a.id === auctionId);\r\n        setSelectedAuction(updatedAuction);\r\n      } else {\r\n        setError('Transaction failed. Please try again.');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error restarting auction:', err);\r\n      setError(`Failed to restart auction: ${err.message}`);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Refresh data periodically\r\n  useEffect(() => {\r\n    if (isConnected && flopperContract && vatContract) {\r\n      // Initial fetch\r\n      fetchAuctions(flopperContract);\r\n      fetchUserBalances(account, vatContract);\r\n      \r\n      // Set up interval for periodic updates\r\n      const interval = setInterval(() => {\r\n        fetchAuctions(flopperContract);\r\n        fetchUserBalances(account, vatContract);\r\n      }, 30000); // Update every 30 seconds\r\n      \r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [isConnected, flopperContract, vatContract, account]);\r\n  \r\n  return (\r\n    <div className=\"app\">\r\n      <Header \r\n        isConnected={isConnected}\r\n        account={account}\r\n        daiBalance={userDaiBalance}\r\n        mkrBalance={userMkrBalance}\r\n        daiInVat={userDaiInVat}\r\n      />\r\n      \r\n      {!isConnected ? (\r\n        <WalletConnect \r\n          connectWallet={connectWallet}\r\n          loading={loading}\r\n          error={error}\r\n        />\r\n      ) : (\r\n        <div className=\"main-content\">\r\n          {loading && <LoadingSpinner />}\r\n          \r\n          {error && <div className=\"error-message\">{error}</div>}\r\n          \r\n          <div className=\"auction-container\">\r\n            <div className=\"auction-list-container\">\r\n              <h2>Active Flop Auctions</h2>\r\n              <FlopAuctionList \r\n                auctions={auctions}\r\n                selectAuction={selectAuction}\r\n                selectedAuctionId={selectedAuction ? selectedAuction.id : null}\r\n              />\r\n            </div>\r\n            \r\n            <div className=\"auction-detail-container\">\r\n              {selectedAuction ? (\r\n                <AuctionDetail \r\n                  auction={selectedAuction}\r\n                  placeBid={placeBid}\r\n                  dealAuction={dealAuction}\r\n                  restartAuction={restartAuction}\r\n                  userDaiInVat={userDaiInVat}\r\n                />\r\n              ) : (\r\n                <div className=\"no-auction-selected\">\r\n                  <p>Select an auction to view details</p>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      <Footer disconnectWallet={disconnectWallet} isConnected={isConnected} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}