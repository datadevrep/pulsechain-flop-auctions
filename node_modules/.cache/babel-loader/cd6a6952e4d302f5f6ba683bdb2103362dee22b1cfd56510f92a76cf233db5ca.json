{"ast":null,"code":"// App.js - Main component for the PulseChain Flop Auctions UI\nimport React,{useState,useEffect}from'react';import{ethers}from'ethers';import'./App.css';import FlopAuctionList from'./components/FlopAuctionList';import AuctionDetail from'./components/AuctionDetail';import WalletConnect from'./components/WalletConnect';import Header from'./components/Header';import Footer from'./components/Footer';import LoadingSpinner from'./components/LoadingSpinner';import{flopperABI}from'./abis/flopperABI';import{vatABI}from'./abis/vatABI';// PulseChain contract addresses - replace these with actual PulseMaker addresses\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const FLOPPER_ADDRESS=\"0xA41B6EF151E06da0e34B009B86E828308986736D\";const VAT_ADDRESS=\"0x35d1b3f3d7966a1dfe207aa4514c12a259a0492b\";const MKR_ADDRESS=\"0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2\";const DAI_JOIN_ADDRESS=\"0x9759a6ac90977b93b58547b4a71c78317f391a28\";function App(){const[provider,setProvider]=useState(null);const[signer,setSigner]=useState(null);const[account,setAccount]=useState('');const[chainId,setChainId]=useState(null);const[isConnected,setIsConnected]=useState(false);const[loading,setLoading]=useState(false);const[error,setError]=useState('');// Contract instances\nconst[flopperContract,setFlopperContract]=useState(null);const[vatContract,setVatContract]=useState(null);// Auction data\nconst[auctions,setAuctions]=useState([]);const[selectedAuction,setSelectedAuction]=useState(null);const[userDaiBalance,setUserDaiBalance]=useState('0');const[userMkrBalance,setUserMkrBalance]=useState('0');const[userDaiInVat,setUserDaiInVat]=useState('0');// PulseChain network ID - replace with actual PulseChain mainnet ID\nconst PULSECHAIN_NETWORK_ID=369;// Example, use actual PulseChain network ID\n// Connect wallet\nconst connectWallet=async()=>{try{setLoading(true);setError('');if(window.ethereum){const provider=new ethers.providers.Web3Provider(window.ethereum);await window.ethereum.request({method:'eth_requestAccounts'});const signer=provider.getSigner();const account=await signer.getAddress();const{chainId}=await provider.getNetwork();// Check if connected to PulseChain\nif(chainId!==PULSECHAIN_NETWORK_ID){try{// Try to switch to PulseChain network\nawait window.ethereum.request({method:'wallet_switchEthereumChain',params:[{chainId:ethers.utils.hexValue(PULSECHAIN_NETWORK_ID)}]});}catch(switchError){// If network doesn't exist in user's wallet, we need to add it\nif(switchError.code===4902){await window.ethereum.request({method:'wallet_addEthereumChain',params:[{chainId:ethers.utils.hexValue(PULSECHAIN_NETWORK_ID),chainName:'PulseChain',nativeCurrency:{name:'PLS',symbol:'PLS',decimals:18},rpcUrls:['https://rpc.pulsechain.com'],blockExplorerUrls:['https://scan.pulsechain.com']}]});}else{throw switchError;}}}// Initialize contracts\nconst flopperContract=new ethers.Contract(FLOPPER_ADDRESS,flopperABI,signer);const vatContract=new ethers.Contract(VAT_ADDRESS,vatABI,signer);setProvider(provider);setSigner(signer);setAccount(account);setChainId(chainId);setIsConnected(true);setFlopperContract(flopperContract);setVatContract(vatContract);// Set up event listeners for wallet changes\nwindow.ethereum.on('accountsChanged',handleAccountsChanged);window.ethereum.on('chainChanged',handleChainChanged);// Fetch initial data\nawait fetchUserBalances(account,vatContract);await fetchAuctions(flopperContract);}else{setError('MetaMask or compatible wallet not found. Please install MetaMask.');}}catch(err){console.error('Connection error:',err);setError(`Failed to connect wallet: ${err.message}`);}finally{setLoading(false);}};// Handle account changes\nconst handleAccountsChanged=async accounts=>{if(accounts.length===0){// User disconnected their wallet\nresetConnection();}else{// User switched accounts\nsetAccount(accounts[0]);await fetchUserBalances(accounts[0],vatContract);}};// Handle chain changes\nconst handleChainChanged=()=>{// Reload the page when the chain changes\nwindow.location.reload();};// Reset connection state\nconst resetConnection=()=>{setProvider(null);setSigner(null);setAccount('');setChainId(null);setIsConnected(false);setFlopperContract(null);setVatContract(null);setAuctions([]);setSelectedAuction(null);setUserDaiBalance('0');setUserMkrBalance('0');setUserDaiInVat('0');};// Disconnect wallet\nconst disconnectWallet=()=>{if(window.ethereum){window.ethereum.removeListener('accountsChanged',handleAccountsChanged);window.ethereum.removeListener('chainChanged',handleChainChanged);}resetConnection();};// Fetch user balances\nconst fetchUserBalances=async(account,vatContract)=>{try{if(!account||!vatContract)return;// Get DAI balance in VAT\nconst daiInVat=await vatContract.dai(account);setUserDaiInVat(ethers.utils.formatUnits(daiInVat,45));// RAD precision (10^45)\n// We would also fetch token balances here, but this is simplified\n// In a real implementation, you would need ERC20 contract instances for DAI and MKR\n}catch(err){console.error('Error fetching balances:',err);}};// Fetch active auctions\nconst fetchAuctions=async flopperContract=>{try{if(!flopperContract)return;setLoading(true);console.log(\"Starting to fetch auctions...\");// Get total number of auctions kicked\nconst kicks=await flopperContract.kicks();const totalAuctions=kicks.toNumber();console.log(`Total auctions kicked: ${totalAuctions}`);const activeAuctions=[];// Loop through auction IDs to find active ones\nconst limit=10;for(let i=1;i<=limit;i++){console.log(`Checking auction ID ${i}...`);try{const auctionData=await flopperContract.bids(i);console.log(`Auction ID ${i} data:`,auctionData);// Check if auction is still active\nif(auctionData.bid.gt(0)&&auctionData.guy!==ethers.constants.AddressZero){// Handle tic as either BigNumber or uint48\nlet tic;if(typeof auctionData.tic.toNumber==='function'){tic=auctionData.tic.toNumber();}else if(typeof auctionData.tic==='number'){tic=auctionData.tic;}else{// If it's a string or other format, convert it\ntic=Number(auctionData.tic.toString());}const now=Math.floor(Date.now()/1000);// Get end timestamp with similar type checking\nlet end;if(typeof auctionData.end.toNumber==='function'){end=auctionData.end.toNumber();}else if(typeof auctionData.end==='number'){end=auctionData.end;}else{end=Number(auctionData.end.toString());}// Only include active auctions\nif(tic===0||tic>now||end>now){const auctionInfo={id:i,bid:ethers.utils.formatUnits(auctionData.bid,18),// RAD precision converted to readable format\nlot:ethers.utils.formatUnits(auctionData.lot,18),// WAD precision\nguy:auctionData.guy,tic:tic,end:end,endFormatted:end>0?new Date(end*1000).toLocaleString():'Unknown',status:tic===0?'Not started':tic>now?'Active':end>now?'Bidding ended, auction active':'Ended'};console.log(`ACTIVE DEBT AUCTION FOUND: Auction #${i}`,auctionInfo);activeAuctions.push(auctionInfo);}else{console.log(`Auction #${i} is inactive: tic=${tic}, now=${now}, end=${end}`);}}else{console.log(`Auction #${i} is inactive: No bid or no bidder`);}}catch(auctionError){console.error(`Error fetching auction #${i}:`,auctionError);}}console.log(`Total active auctions found: ${activeAuctions.length}`);console.log(\"Active auctions:\",activeAuctions);setAuctions(activeAuctions);}catch(err){console.error('Error fetching auctions:',err);setError(`Failed to fetch auctions: ${err.message}`);}finally{setLoading(false);}};// Select an auction to view details\nconst selectAuction=auction=>{setSelectedAuction(auction);};// Place a bid in the auction\nconst placeBid=async(auctionId,lotAmount)=>{try{if(!flopperContract||!signer){setError('Wallet not connected or contracts not initialized');return;}setLoading(true);// Get current auction state\nconst auctionData=await flopperContract.bids(auctionId);// Ensure we have enough DAI in VAT to place bid\nconst bidAmount=auctionData.bid;const daiInVat=await vatContract.dai(account);if(daiInVat.lt(bidAmount)){setError(`Not enough DAI in VAT. Need ${ethers.utils.formatUnits(bidAmount,45)} DAI, have ${ethers.utils.formatUnits(daiInVat,45)} DAI.`);return;}// Convert lot amount to proper format (WAD precision)\nconst lotAmountWad=ethers.utils.parseUnits(lotAmount.toString(),18);// Call dent function to place bid with fixed DAI amount and reduced lot size\n// dent(uint id, uint lot, uint bid)\nconst tx=await flopperContract.dent(auctionId,lotAmountWad,bidAmount);// Wait for transaction to be mined\nconst receipt=await tx.wait();if(receipt.status===1){// Transaction successful\n// Refresh auction data\nawait fetchAuctions(flopperContract);await fetchUserBalances(account,vatContract);// Update selected auction\nconst updatedAuction=auctions.find(a=>a.id===auctionId);setSelectedAuction(updatedAuction);}else{setError('Transaction failed. Please try again.');}}catch(err){console.error('Error placing bid:',err);setError(`Failed to place bid: ${err.message}`);}finally{setLoading(false);}};// Deal (settle) an auction\nconst dealAuction=async auctionId=>{try{if(!flopperContract||!signer){setError('Wallet not connected or contracts not initialized');return;}setLoading(true);// Call deal function to settle auction\nconst tx=await flopperContract.deal(auctionId);// Wait for transaction to be mined\nconst receipt=await tx.wait();if(receipt.status===1){// Transaction successful\n// Refresh auction data\nawait fetchAuctions(flopperContract);await fetchUserBalances(account,vatContract);// Clear selected auction if it was the one dealt\nif(selectedAuction&&selectedAuction.id===auctionId){setSelectedAuction(null);}}else{setError('Transaction failed. Please try again.');}}catch(err){console.error('Error dealing auction:',err);setError(`Failed to deal auction: ${err.message}`);}finally{setLoading(false);}};// Restart an auction that received no bids\nconst restartAuction=async auctionId=>{try{if(!flopperContract||!signer){setError('Wallet not connected or contracts not initialized');return;}setLoading(true);// Call tick function to restart auction\nconst tx=await flopperContract.tick(auctionId);// Wait for transaction to be mined\nconst receipt=await tx.wait();if(receipt.status===1){// Transaction successful\n// Refresh auction data\nawait fetchAuctions(flopperContract);// Update selected auction\nconst updatedAuction=auctions.find(a=>a.id===auctionId);setSelectedAuction(updatedAuction);}else{setError('Transaction failed. Please try again.');}}catch(err){console.error('Error restarting auction:',err);setError(`Failed to restart auction: ${err.message}`);}finally{setLoading(false);}};// Refresh data periodically\nuseEffect(()=>{if(isConnected&&flopperContract&&vatContract){// Initial fetch\nfetchAuctions(flopperContract);fetchUserBalances(account,vatContract);// Set up interval for periodic updates\nconst interval=setInterval(()=>{fetchAuctions(flopperContract);fetchUserBalances(account,vatContract);},30000);// Update every 30 seconds\nreturn()=>clearInterval(interval);}},[isConnected,flopperContract,vatContract,account]);return/*#__PURE__*/_jsxs(\"div\",{className:\"app\",children:[/*#__PURE__*/_jsx(Header,{isConnected:isConnected,account:account,daiBalance:userDaiBalance,mkrBalance:userMkrBalance,daiInVat:userDaiInVat}),!isConnected?/*#__PURE__*/_jsx(WalletConnect,{connectWallet:connectWallet,loading:loading,error:error}):/*#__PURE__*/_jsxs(\"div\",{className:\"main-content\",children:[loading&&/*#__PURE__*/_jsx(LoadingSpinner,{}),error&&/*#__PURE__*/_jsx(\"div\",{className:\"error-message\",children:error}),/*#__PURE__*/_jsxs(\"div\",{className:\"auction-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"auction-list-container\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Active Flop Auctions\"}),/*#__PURE__*/_jsx(FlopAuctionList,{auctions:auctions,selectAuction:selectAuction,selectedAuctionId:selectedAuction?selectedAuction.id:null})]}),/*#__PURE__*/_jsx(\"div\",{className:\"auction-detail-container\",children:selectedAuction?/*#__PURE__*/_jsx(AuctionDetail,{auction:selectedAuction,placeBid:placeBid,dealAuction:dealAuction,restartAuction:restartAuction,userDaiInVat:userDaiInVat}):/*#__PURE__*/_jsx(\"div\",{className:\"no-auction-selected\",children:/*#__PURE__*/_jsx(\"p\",{children:\"Select an auction to view details\"})})})]})]}),/*#__PURE__*/_jsx(Footer,{disconnectWallet:disconnectWallet,isConnected:isConnected})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","ethers","FlopAuctionList","AuctionDetail","WalletConnect","Header","Footer","LoadingSpinner","flopperABI","vatABI","jsx","_jsx","jsxs","_jsxs","FLOPPER_ADDRESS","VAT_ADDRESS","MKR_ADDRESS","DAI_JOIN_ADDRESS","App","provider","setProvider","signer","setSigner","account","setAccount","chainId","setChainId","isConnected","setIsConnected","loading","setLoading","error","setError","flopperContract","setFlopperContract","vatContract","setVatContract","auctions","setAuctions","selectedAuction","setSelectedAuction","userDaiBalance","setUserDaiBalance","userMkrBalance","setUserMkrBalance","userDaiInVat","setUserDaiInVat","PULSECHAIN_NETWORK_ID","connectWallet","window","ethereum","providers","Web3Provider","request","method","getSigner","getAddress","getNetwork","params","utils","hexValue","switchError","code","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","Contract","on","handleAccountsChanged","handleChainChanged","fetchUserBalances","fetchAuctions","err","console","message","accounts","length","resetConnection","location","reload","disconnectWallet","removeListener","daiInVat","dai","formatUnits","log","kicks","totalAuctions","toNumber","activeAuctions","limit","i","auctionData","bids","bid","gt","guy","constants","AddressZero","tic","Number","toString","now","Math","floor","Date","end","auctionInfo","id","lot","endFormatted","toLocaleString","status","push","auctionError","selectAuction","auction","placeBid","auctionId","lotAmount","bidAmount","lt","lotAmountWad","parseUnits","tx","dent","receipt","wait","updatedAuction","find","a","dealAuction","deal","restartAuction","tick","interval","setInterval","clearInterval","className","children","daiBalance","mkrBalance","selectedAuctionId"],"sources":["C:/Users/Jean-Luc/Desktop/pulsechain-flop-auctions/src/App.js"],"sourcesContent":["// App.js - Main component for the PulseChain Flop Auctions UI\r\nimport React, { useState, useEffect } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport './App.css';\r\nimport FlopAuctionList from './components/FlopAuctionList';\r\nimport AuctionDetail from './components/AuctionDetail';\r\nimport WalletConnect from './components/WalletConnect';\r\nimport Header from './components/Header';\r\nimport Footer from './components/Footer';\r\nimport LoadingSpinner from './components/LoadingSpinner';\r\nimport { flopperABI } from './abis/flopperABI';\r\nimport { vatABI } from './abis/vatABI';\r\n\r\n// PulseChain contract addresses - replace these with actual PulseMaker addresses\r\nconst FLOPPER_ADDRESS = \"0xA41B6EF151E06da0e34B009B86E828308986736D\";\r\nconst VAT_ADDRESS = \"0x35d1b3f3d7966a1dfe207aa4514c12a259a0492b\";\r\nconst MKR_ADDRESS = \"0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2\";\r\nconst DAI_JOIN_ADDRESS = \"0x9759a6ac90977b93b58547b4a71c78317f391a28\";\r\n\r\nfunction App() {\r\n  const [provider, setProvider] = useState(null);\r\n  const [signer, setSigner] = useState(null);\r\n  const [account, setAccount] = useState('');\r\n  const [chainId, setChainId] = useState(null);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  \r\n  // Contract instances\r\n  const [flopperContract, setFlopperContract] = useState(null);\r\n  const [vatContract, setVatContract] = useState(null);\r\n  \r\n  // Auction data\r\n  const [auctions, setAuctions] = useState([]);\r\n  const [selectedAuction, setSelectedAuction] = useState(null);\r\n  const [userDaiBalance, setUserDaiBalance] = useState('0');\r\n  const [userMkrBalance, setUserMkrBalance] = useState('0');\r\n  const [userDaiInVat, setUserDaiInVat] = useState('0');\r\n  \r\n  // PulseChain network ID - replace with actual PulseChain mainnet ID\r\n  const PULSECHAIN_NETWORK_ID = 369; // Example, use actual PulseChain network ID\r\n\r\n  // Connect wallet\r\n  const connectWallet = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError('');\r\n      \r\n      if (window.ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n        \r\n        const signer = provider.getSigner();\r\n        const account = await signer.getAddress();\r\n        const { chainId } = await provider.getNetwork();\r\n        \r\n        // Check if connected to PulseChain\r\n        if (chainId !== PULSECHAIN_NETWORK_ID) {\r\n          try {\r\n            // Try to switch to PulseChain network\r\n            await window.ethereum.request({\r\n              method: 'wallet_switchEthereumChain',\r\n              params: [{ chainId: ethers.utils.hexValue(PULSECHAIN_NETWORK_ID) }],\r\n            });\r\n          } catch (switchError) {\r\n            // If network doesn't exist in user's wallet, we need to add it\r\n            if (switchError.code === 4902) {\r\n              await window.ethereum.request({\r\n                method: 'wallet_addEthereumChain',\r\n                params: [{\r\n                  chainId: ethers.utils.hexValue(PULSECHAIN_NETWORK_ID),\r\n                  chainName: 'PulseChain',\r\n                  nativeCurrency: {\r\n                    name: 'PLS',\r\n                    symbol: 'PLS',\r\n                    decimals: 18\r\n                  },\r\n                  rpcUrls: ['https://rpc.pulsechain.com'],\r\n                  blockExplorerUrls: ['https://scan.pulsechain.com']\r\n                }]\r\n              });\r\n            } else {\r\n              throw switchError;\r\n            }\r\n          }\r\n        }\r\n        \r\n        // Initialize contracts\r\n        const flopperContract = new ethers.Contract(FLOPPER_ADDRESS, flopperABI, signer);\r\n        const vatContract = new ethers.Contract(VAT_ADDRESS, vatABI, signer);\r\n        \r\n        setProvider(provider);\r\n        setSigner(signer);\r\n        setAccount(account);\r\n        setChainId(chainId);\r\n        setIsConnected(true);\r\n        setFlopperContract(flopperContract);\r\n        setVatContract(vatContract);\r\n        \r\n        // Set up event listeners for wallet changes\r\n        window.ethereum.on('accountsChanged', handleAccountsChanged);\r\n        window.ethereum.on('chainChanged', handleChainChanged);\r\n        \r\n        // Fetch initial data\r\n        await fetchUserBalances(account, vatContract);\r\n        await fetchAuctions(flopperContract);\r\n      } else {\r\n        setError('MetaMask or compatible wallet not found. Please install MetaMask.');\r\n      }\r\n    } catch (err) {\r\n      console.error('Connection error:', err);\r\n      setError(`Failed to connect wallet: ${err.message}`);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Handle account changes\r\n  const handleAccountsChanged = async (accounts) => {\r\n    if (accounts.length === 0) {\r\n      // User disconnected their wallet\r\n      resetConnection();\r\n    } else {\r\n      // User switched accounts\r\n      setAccount(accounts[0]);\r\n      await fetchUserBalances(accounts[0], vatContract);\r\n    }\r\n  };\r\n  \r\n  // Handle chain changes\r\n  const handleChainChanged = () => {\r\n    // Reload the page when the chain changes\r\n    window.location.reload();\r\n  };\r\n  \r\n  // Reset connection state\r\n  const resetConnection = () => {\r\n    setProvider(null);\r\n    setSigner(null);\r\n    setAccount('');\r\n    setChainId(null);\r\n    setIsConnected(false);\r\n    setFlopperContract(null);\r\n    setVatContract(null);\r\n    setAuctions([]);\r\n    setSelectedAuction(null);\r\n    setUserDaiBalance('0');\r\n    setUserMkrBalance('0');\r\n    setUserDaiInVat('0');\r\n  };\r\n  \r\n  // Disconnect wallet\r\n  const disconnectWallet = () => {\r\n    if (window.ethereum) {\r\n      window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\r\n      window.ethereum.removeListener('chainChanged', handleChainChanged);\r\n    }\r\n    resetConnection();\r\n  };\r\n  \r\n  // Fetch user balances\r\n  const fetchUserBalances = async (account, vatContract) => {\r\n    try {\r\n      if (!account || !vatContract) return;\r\n      \r\n      // Get DAI balance in VAT\r\n      const daiInVat = await vatContract.dai(account);\r\n      setUserDaiInVat(ethers.utils.formatUnits(daiInVat, 45)); // RAD precision (10^45)\r\n      \r\n      // We would also fetch token balances here, but this is simplified\r\n      // In a real implementation, you would need ERC20 contract instances for DAI and MKR\r\n    } catch (err) {\r\n      console.error('Error fetching balances:', err);\r\n    }\r\n  };\r\n  \r\n  // Fetch active auctions\r\n  const fetchAuctions = async (flopperContract) => {\r\n    try {\r\n      if (!flopperContract) return;\r\n\r\n      setLoading(true);\r\n      console.log(\"Starting to fetch auctions...\");\r\n\r\n      // Get total number of auctions kicked\r\n      const kicks = await flopperContract.kicks();\r\n      const totalAuctions = kicks.toNumber();\r\n      console.log(`Total auctions kicked: ${totalAuctions}`);\r\n\r\n      const activeAuctions = [];\r\n\r\n      // Loop through auction IDs to find active ones\r\n      const limit = 10;\r\n      for (let i = 1; i <= limit; i++) {\r\n        console.log(`Checking auction ID ${i}...`);\r\n\r\n        try {\r\n          const auctionData = await flopperContract.bids(i);\r\n          console.log(`Auction ID ${i} data:`, auctionData);\r\n\r\n          // Check if auction is still active\r\n          if (auctionData.bid.gt(0) && auctionData.guy !== ethers.constants.AddressZero) {\r\n            // Handle tic as either BigNumber or uint48\r\n            let tic;\r\n            if (typeof auctionData.tic.toNumber === 'function') {\r\n              tic = auctionData.tic.toNumber();\r\n            } else if (typeof auctionData.tic === 'number') {\r\n              tic = auctionData.tic;\r\n            } else {\r\n              // If it's a string or other format, convert it\r\n              tic = Number(auctionData.tic.toString());\r\n            }\r\n\r\n            const now = Math.floor(Date.now() / 1000);\r\n\r\n            // Get end timestamp with similar type checking\r\n            let end;\r\n            if (typeof auctionData.end.toNumber === 'function') {\r\n              end = auctionData.end.toNumber();\r\n            } else if (typeof auctionData.end === 'number') {\r\n              end = auctionData.end;\r\n            } else {\r\n              end = Number(auctionData.end.toString());\r\n            }\r\n\r\n            // Only include active auctions\r\n            if (tic === 0 || tic > now || end > now) {\r\n              const auctionInfo = {\r\n                id: i,\r\n                bid: ethers.utils.formatUnits(auctionData.bid, 18), // RAD precision converted to readable format\r\n                lot: ethers.utils.formatUnits(auctionData.lot, 18), // WAD precision\r\n                guy: auctionData.guy,\r\n                tic: tic,\r\n                end: end,\r\n                endFormatted: end > 0 ? new Date(end * 1000).toLocaleString() : 'Unknown',\r\n                status: tic === 0 ? 'Not started' : (tic > now ? 'Active' : (end > now ? 'Bidding ended, auction active' : 'Ended'))\r\n              };\r\n\r\n              console.log(`ACTIVE DEBT AUCTION FOUND: Auction #${i}`, auctionInfo);\r\n              activeAuctions.push(auctionInfo);\r\n            } else {\r\n              console.log(`Auction #${i} is inactive: tic=${tic}, now=${now}, end=${end}`);\r\n            }\r\n          } else {\r\n            console.log(`Auction #${i} is inactive: No bid or no bidder`);\r\n          }\r\n        } catch (auctionError) {\r\n          console.error(`Error fetching auction #${i}:`, auctionError);\r\n        }\r\n      }\r\n\r\n      console.log(`Total active auctions found: ${activeAuctions.length}`);\r\n      console.log(\"Active auctions:\", activeAuctions);\r\n\r\n      setAuctions(activeAuctions);\r\n    } catch (err) {\r\n      console.error('Error fetching auctions:', err);\r\n      setError(`Failed to fetch auctions: ${err.message}`);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Select an auction to view details\r\n  const selectAuction = (auction) => {\r\n    setSelectedAuction(auction);\r\n  };\r\n  \r\n  // Place a bid in the auction\r\n  const placeBid = async (auctionId, lotAmount) => {\r\n    try {\r\n      if (!flopperContract || !signer) {\r\n        setError('Wallet not connected or contracts not initialized');\r\n        return;\r\n      }\r\n      \r\n      setLoading(true);\r\n      \r\n      // Get current auction state\r\n      const auctionData = await flopperContract.bids(auctionId);\r\n      \r\n      // Ensure we have enough DAI in VAT to place bid\r\n      const bidAmount = auctionData.bid;\r\n      const daiInVat = await vatContract.dai(account);\r\n      \r\n      if (daiInVat.lt(bidAmount)) {\r\n        setError(`Not enough DAI in VAT. Need ${ethers.utils.formatUnits(bidAmount, 45)} DAI, have ${ethers.utils.formatUnits(daiInVat, 45)} DAI.`);\r\n        return;\r\n      }\r\n      \r\n      // Convert lot amount to proper format (WAD precision)\r\n      const lotAmountWad = ethers.utils.parseUnits(lotAmount.toString(), 18);\r\n      \r\n      // Call dent function to place bid with fixed DAI amount and reduced lot size\r\n      // dent(uint id, uint lot, uint bid)\r\n      const tx = await flopperContract.dent(auctionId, lotAmountWad, bidAmount);\r\n      \r\n      // Wait for transaction to be mined\r\n      const receipt = await tx.wait();\r\n      \r\n      if (receipt.status === 1) {\r\n        // Transaction successful\r\n        // Refresh auction data\r\n        await fetchAuctions(flopperContract);\r\n        await fetchUserBalances(account, vatContract);\r\n        \r\n        // Update selected auction\r\n        const updatedAuction = auctions.find(a => a.id === auctionId);\r\n        setSelectedAuction(updatedAuction);\r\n      } else {\r\n        setError('Transaction failed. Please try again.');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error placing bid:', err);\r\n      setError(`Failed to place bid: ${err.message}`);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Deal (settle) an auction\r\n  const dealAuction = async (auctionId) => {\r\n    try {\r\n      if (!flopperContract || !signer) {\r\n        setError('Wallet not connected or contracts not initialized');\r\n        return;\r\n      }\r\n      \r\n      setLoading(true);\r\n      \r\n      // Call deal function to settle auction\r\n      const tx = await flopperContract.deal(auctionId);\r\n      \r\n      // Wait for transaction to be mined\r\n      const receipt = await tx.wait();\r\n      \r\n      if (receipt.status === 1) {\r\n        // Transaction successful\r\n        // Refresh auction data\r\n        await fetchAuctions(flopperContract);\r\n        await fetchUserBalances(account, vatContract);\r\n        \r\n        // Clear selected auction if it was the one dealt\r\n        if (selectedAuction && selectedAuction.id === auctionId) {\r\n          setSelectedAuction(null);\r\n        }\r\n      } else {\r\n        setError('Transaction failed. Please try again.');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error dealing auction:', err);\r\n      setError(`Failed to deal auction: ${err.message}`);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Restart an auction that received no bids\r\n  const restartAuction = async (auctionId) => {\r\n    try {\r\n      if (!flopperContract || !signer) {\r\n        setError('Wallet not connected or contracts not initialized');\r\n        return;\r\n      }\r\n      \r\n      setLoading(true);\r\n      \r\n      // Call tick function to restart auction\r\n      const tx = await flopperContract.tick(auctionId);\r\n      \r\n      // Wait for transaction to be mined\r\n      const receipt = await tx.wait();\r\n      \r\n      if (receipt.status === 1) {\r\n        // Transaction successful\r\n        // Refresh auction data\r\n        await fetchAuctions(flopperContract);\r\n        \r\n        // Update selected auction\r\n        const updatedAuction = auctions.find(a => a.id === auctionId);\r\n        setSelectedAuction(updatedAuction);\r\n      } else {\r\n        setError('Transaction failed. Please try again.');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error restarting auction:', err);\r\n      setError(`Failed to restart auction: ${err.message}`);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Refresh data periodically\r\n  useEffect(() => {\r\n    if (isConnected && flopperContract && vatContract) {\r\n      // Initial fetch\r\n      fetchAuctions(flopperContract);\r\n      fetchUserBalances(account, vatContract);\r\n      \r\n      // Set up interval for periodic updates\r\n      const interval = setInterval(() => {\r\n        fetchAuctions(flopperContract);\r\n        fetchUserBalances(account, vatContract);\r\n      }, 30000); // Update every 30 seconds\r\n      \r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [isConnected, flopperContract, vatContract, account]);\r\n  \r\n  return (\r\n    <div className=\"app\">\r\n      <Header \r\n        isConnected={isConnected}\r\n        account={account}\r\n        daiBalance={userDaiBalance}\r\n        mkrBalance={userMkrBalance}\r\n        daiInVat={userDaiInVat}\r\n      />\r\n      \r\n      {!isConnected ? (\r\n        <WalletConnect \r\n          connectWallet={connectWallet}\r\n          loading={loading}\r\n          error={error}\r\n        />\r\n      ) : (\r\n        <div className=\"main-content\">\r\n          {loading && <LoadingSpinner />}\r\n          \r\n          {error && <div className=\"error-message\">{error}</div>}\r\n          \r\n          <div className=\"auction-container\">\r\n            <div className=\"auction-list-container\">\r\n              <h2>Active Flop Auctions</h2>\r\n              <FlopAuctionList \r\n                auctions={auctions}\r\n                selectAuction={selectAuction}\r\n                selectedAuctionId={selectedAuction ? selectedAuction.id : null}\r\n              />\r\n            </div>\r\n            \r\n            <div className=\"auction-detail-container\">\r\n              {selectedAuction ? (\r\n                <AuctionDetail \r\n                  auction={selectedAuction}\r\n                  placeBid={placeBid}\r\n                  dealAuction={dealAuction}\r\n                  restartAuction={restartAuction}\r\n                  userDaiInVat={userDaiInVat}\r\n                />\r\n              ) : (\r\n                <div className=\"no-auction-selected\">\r\n                  <p>Select an auction to view details</p>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      <Footer disconnectWallet={disconnectWallet} isConnected={isConnected} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}